@model BlogCentralVersion2.Models.Comment

@{
    int BlogPostId = Convert.ToInt32(ViewData["BlogPostId"]);
    int BloggId = Convert.ToInt32(ViewData["BloggId"]);
}

@using (Html.BeginForm("CreateComment", "BlogPosts", new { BloggId = BloggId, BlogPostId = BlogPostId })) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group hidden">
            @Html.LabelFor(model => model.CommentName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CommentName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CommentName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CommentPost, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CommentPost, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CommentPost, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group hidden">
            @Html.LabelFor(model => model.Datecreated, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Datecreated, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Datecreated, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Lagre kommentar" class="btn btn-success" />
            </div>
        </div>
    </div>
    <hr />
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
